{"remainingRequest":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/admin/src/views/article/Article.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/admin/src/views/article/Article.vue","mtime":1666926022000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/admin/node_modules/cache-loader/dist/cjs.js","mtime":1671701058468},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/admin/node_modules/thread-loader/dist/cjs.js","mtime":1671701058440},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/admin/node_modules/babel-loader/lib/index.js","mtime":1671701058672},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/admin/node_modules/cache-loader/dist/cjs.js","mtime":1671701058468},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/admin/node_modules/vue-loader/lib/index.js","mtime":1671701059661}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}