{"remainingRequest":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/thread-loader/dist/cjs.js!/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/babel-loader/lib/index.js!/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/vuetify/lib/components/VCalendar/modes/stack.js","dependencies":[{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/vuetify/lib/components/VCalendar/modes/stack.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlIjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9Vc2Vycy9zdW53ZW5iby9Eb3dubG9hZHMvXHU1MzVBXHU1QkEyL25ldy1ibG9nLW1hc3Rlci9odWdoc3diX2Jsb2cvaHVnaHN3Yi12dWUvaHVnaHN3Yl9ibG9nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5IjsKaW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9zdW53ZW5iby9Eb3dubG9hZHMvXHU1MzVBXHU1QkEyL25ldy1ibG9nLW1hc3Rlci9odWdoc3diX2Jsb2cvaHVnaHN3Yi12dWUvaHVnaHN3Yl9ibG9nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIjsKaW1wb3J0IHsgZ2V0T3ZlcmxhcEdyb3VwSGFuZGxlciwgZ2V0VmlzdWFscywgaGFzT3ZlcmxhcCwgZ2V0Tm9ybWFsaXplZFJhbmdlIH0gZnJvbSAnLi9jb21tb24nOwppbXBvcnQgeyBnZXRUaW1lc3RhbXBJZGVudGlmaWVyIH0gZnJvbSAnLi4vdXRpbC90aW1lc3RhbXAnOwp2YXIgRlVMTF9XSURUSCA9IDEwMDsKdmFyIERFRkFVTFRfT0ZGU0VUID0gNTsKdmFyIFdJRFRIX01VTFRJUExJRVIgPSAxLjc7Ci8qKgogKiBWYXJpYXRpb24gb2YgY29sdW1uIG1vZGUgd2hlcmUgZXZlbnRzIGNhbiBiZSBzdGFja2VkLiBUaGUgcHJpb3JpdHkgb2YgdGhpcwogKiBtb2RlIGlzIHRvIHN0YWNrIGV2ZW50cyB0b2dldGhlciB0YWtpbmcgdXAgdGhlIGxlYXN0IGFtb3VudCBvZiBzcGFjZSB3aGlsZQogKiB0cnlpbmcgdG8gZW5zdXJlIHRoZSBjb250ZW50IG9mIHRoZSBldmVudCBpcyBhbHdheXMgdmlzaWJsZSBhcyB3ZWxsIGFzIGl0cwogKiBzdGFydCBhbmQgZW5kLiBBIHNpYmxpbmcgY29sdW1uIGhhcyBpbnRlcnNlY3RpbmcgZXZlbnQgY29udGVudCBhbmQgbXVzdCBiZQogKiBwbGFjZWQgYmVzaWRlIGVhY2ggb3RoZXIuIE5vbi1zaWJsaW5nIGNvbHVtbnMgYXJlIG9mZnNldCBieSA1JSBmcm9tIHRoZQogKiBwcmV2aW91cyBjb2x1bW4uIFRoZSB3aWR0aCBpcyBzY2FsZWQgYnkgMS43IHNvIHRoZSBldmVudHMgb3ZlcmxhcCBhbmQKICogd2hpdGVzcGFjZSBpcyByZWR1Y2VkLiBJZiB0aGVyZSBpcyBhIGhvbGUgaW4gY29sdW1ucyB0aGUgZXZlbnQgd2lkdGggaXMKICogc2NhbGVkIHVwIHNvIGl0IGludGVyc2VjdHMgd2l0aCB0aGUgbmV4dCBjb2x1bW4uIFRoZSBjb2x1bW5zIGhhdmUgZXF1YWwKICogd2lkdGggaW4gdGhlIHNwYWNlIHRoZXkgYXJlIGdpdmVuLiBJZiB0aGUgZXZlbnQgZG9lc24ndCBoYXZlIGFueSB0byB0aGUKICogcmlnaHQgb2YgaXQgdGhhdCBpbnRlcnNlY3Qgd2l0aCBpdCdzIGNvbnRlbnQgaXQncyByaWdodCBzaWRlIGlzIGV4dGVuZGVkCiAqIHRvIHRoZSByaWdodCBzaWRlLgogKi8KCmV4cG9ydCB2YXIgc3RhY2sgPSBmdW5jdGlvbiBzdGFjayhldmVudHMsIGZpcnN0V2Vla2RheSwgb3ZlcmxhcFRocmVzaG9sZCkgewogIHZhciBoYW5kbGVyID0gZ2V0T3ZlcmxhcEdyb3VwSGFuZGxlcihmaXJzdFdlZWtkYXkpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMKCiAgcmV0dXJuIGZ1bmN0aW9uIChkYXksIGRheUV2ZW50cywgdGltZWQsIHJlc2V0KSB7CiAgICBpZiAoIXRpbWVkKSB7CiAgICAgIHJldHVybiBoYW5kbGVyLmdldFZpc3VhbHMoZGF5LCBkYXlFdmVudHMsIHRpbWVkLCByZXNldCk7CiAgICB9CgogICAgdmFyIGRheVN0YXJ0ID0gZ2V0VGltZXN0YW1wSWRlbnRpZmllcihkYXkpOwogICAgdmFyIHZpc3VhbHMgPSBnZXRWaXN1YWxzKGRheUV2ZW50cywgZGF5U3RhcnQpOwogICAgdmFyIGdyb3VwcyA9IGdldEdyb3Vwcyh2aXN1YWxzLCBkYXlTdGFydCk7CgogICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGdyb3VwcyksCiAgICAgICAgX3N0ZXA7CgogICAgdHJ5IHsKICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICB2YXIgZ3JvdXAgPSBfc3RlcC52YWx1ZTsKICAgICAgICB2YXIgbm9kZXMgPSBbXTsKCiAgICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihncm91cC52aXN1YWxzKSwKICAgICAgICAgICAgX3N0ZXAyOwoKICAgICAgICB0cnkgewogICAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgdmFyIHZpc3VhbCA9IF9zdGVwMi52YWx1ZTsKICAgICAgICAgICAgdmFyIGNoaWxkID0gZ2V0Tm9kZSh2aXN1YWwsIGRheVN0YXJ0KTsKICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0TmV4dEluZGV4KGNoaWxkLCBub2Rlcyk7CgogICAgICAgICAgICBpZiAoaW5kZXggPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGdldFBhcmVudChjaGlsZCwgbm9kZXMpOwoKICAgICAgICAgICAgICBpZiAocGFyZW50KSB7CiAgICAgICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBwYXJlbnQ7CiAgICAgICAgICAgICAgICBjaGlsZC5zaWJsaW5nID0gaGFzT3ZlcmxhcChjaGlsZC5zdGFydCwgY2hpbGQuZW5kLCBwYXJlbnQuc3RhcnQsIGFkZFRpbWUocGFyZW50LnN0YXJ0LCBvdmVybGFwVGhyZXNob2xkKSk7CiAgICAgICAgICAgICAgICBjaGlsZC5pbmRleCA9IHBhcmVudC5pbmRleCArIDE7CiAgICAgICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBfZ2V0T3ZlcmxhcHBpbmdSYW5nZSA9IGdldE92ZXJsYXBwaW5nUmFuZ2UoY2hpbGQsIG5vZGVzLCBpbmRleCAtIDEsIGluZGV4IC0gMSksCiAgICAgICAgICAgICAgICAgIF9nZXRPdmVybGFwcGluZ1JhbmdlMiA9IF9zbGljZWRUb0FycmF5KF9nZXRPdmVybGFwcGluZ1JhbmdlLCAxKSwKICAgICAgICAgICAgICAgICAgX3BhcmVudCA9IF9nZXRPdmVybGFwcGluZ1JhbmdlMlswXTsKCiAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gZ2V0T3ZlcmxhcHBpbmdSYW5nZShjaGlsZCwgbm9kZXMsIGluZGV4ICsgMSwgaW5kZXggKyBub2Rlcy5sZW5ndGgsIHRydWUpOwogICAgICAgICAgICAgIGNoaWxkLmNoaWxkcmVuID0gY2hpbGRyZW47CiAgICAgICAgICAgICAgY2hpbGQuaW5kZXggPSBpbmRleDsKCiAgICAgICAgICAgICAgaWYgKF9wYXJlbnQpIHsKICAgICAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IF9wYXJlbnQ7CiAgICAgICAgICAgICAgICBjaGlsZC5zaWJsaW5nID0gaGFzT3ZlcmxhcChjaGlsZC5zdGFydCwgY2hpbGQuZW5kLCBfcGFyZW50LnN0YXJ0LCBhZGRUaW1lKF9wYXJlbnQuc3RhcnQsIG92ZXJsYXBUaHJlc2hvbGQpKTsKCiAgICAgICAgICAgICAgICBfcGFyZW50LmNoaWxkcmVuLnB1c2goY2hpbGQpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihjaGlsZHJlbiksCiAgICAgICAgICAgICAgICAgIF9zdGVwMzsKCiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgIHZhciBncmFuZCA9IF9zdGVwMy52YWx1ZTsKCiAgICAgICAgICAgICAgICAgIGlmIChncmFuZC5wYXJlbnQgPT09IF9wYXJlbnQpIHsKICAgICAgICAgICAgICAgICAgICBncmFuZC5wYXJlbnQgPSBjaGlsZDsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdmFyIGdyYW5kTmV4dCA9IGdyYW5kLmluZGV4IC0gY2hpbGQuaW5kZXggPD0gMTsKCiAgICAgICAgICAgICAgICAgIGlmIChncmFuZE5leHQgJiYgY2hpbGQuc2libGluZyAmJiBoYXNPdmVybGFwKGNoaWxkLnN0YXJ0LCBhZGRUaW1lKGNoaWxkLnN0YXJ0LCBvdmVybGFwVGhyZXNob2xkKSwgZ3JhbmQuc3RhcnQsIGdyYW5kLmVuZCkpIHsKICAgICAgICAgICAgICAgICAgICBncmFuZC5zaWJsaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMuZigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgbm9kZXMucHVzaChjaGlsZCk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgICAgfQoKICAgICAgICBjYWxjdWxhdGVCb3VuZHMobm9kZXMsIG92ZXJsYXBUaHJlc2hvbGQpOwogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgIH0gZmluYWxseSB7CiAgICAgIF9pdGVyYXRvci5mKCk7CiAgICB9CgogICAgdmlzdWFscy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIHJldHVybiBhLmxlZnQgLSBiLmxlZnQgfHwgYS5ldmVudC5zdGFydFRpbWVzdGFtcElkZW50aWZpZXIgLSBiLmV2ZW50LnN0YXJ0VGltZXN0YW1wSWRlbnRpZmllcjsKICAgIH0pOwogICAgcmV0dXJuIHZpc3VhbHM7CiAgfTsKfTsKCmZ1bmN0aW9uIGNhbGN1bGF0ZUJvdW5kcyhub2Rlcywgb3ZlcmxhcFRocmVzaG9sZCkgewogIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobm9kZXMpLAogICAgICBfc3RlcDQ7CgogIHRyeSB7CiAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykgewogICAgICB2YXIgbm9kZSA9IF9zdGVwNC52YWx1ZTsKICAgICAgdmFyIHZpc3VhbCA9IG5vZGUudmlzdWFsLAogICAgICAgICAgcGFyZW50ID0gbm9kZS5wYXJlbnQ7CiAgICAgIHZhciBjb2x1bW5zID0gZ2V0TWF4Q2hpbGRJbmRleChub2RlKSArIDE7CiAgICAgIHZhciBzcGFjZUxlZnQgPSBwYXJlbnQgPyBwYXJlbnQudmlzdWFsLmxlZnQgOiAwOwogICAgICB2YXIgc3BhY2VXaWR0aCA9IEZVTExfV0lEVEggLSBzcGFjZUxlZnQ7CiAgICAgIHZhciBvZmZzZXQgPSBNYXRoLm1pbihERUZBVUxUX09GRlNFVCwgRlVMTF9XSURUSCAvIGNvbHVtbnMpOwogICAgICB2YXIgY29sdW1uV2lkdGhNdWx0aXBsaWVyID0gZ2V0Q29sdW1uV2lkdGhNdWx0aXBsaWVyKG5vZGUsIG5vZGVzKTsKICAgICAgdmFyIGNvbHVtbk9mZnNldCA9IHNwYWNlV2lkdGggLyAoY29sdW1ucyAtIG5vZGUuaW5kZXggKyAxKTsKICAgICAgdmFyIGNvbHVtbldpZHRoID0gc3BhY2VXaWR0aCAvIChjb2x1bW5zIC0gbm9kZS5pbmRleCArIChub2RlLnNpYmxpbmcgPyAxIDogMCkpICogY29sdW1uV2lkdGhNdWx0aXBsaWVyOwoKICAgICAgaWYgKHBhcmVudCkgewogICAgICAgIHZpc3VhbC5sZWZ0ID0gbm9kZS5zaWJsaW5nID8gc3BhY2VMZWZ0ICsgY29sdW1uT2Zmc2V0IDogc3BhY2VMZWZ0ICsgb2Zmc2V0OwogICAgICB9CgogICAgICB2aXN1YWwud2lkdGggPSBoYXNGdWxsV2lkdGgobm9kZSwgbm9kZXMsIG92ZXJsYXBUaHJlc2hvbGQpID8gRlVMTF9XSURUSCAtIHZpc3VhbC5sZWZ0IDogTWF0aC5taW4oRlVMTF9XSURUSCAtIHZpc3VhbC5sZWZ0LCBjb2x1bW5XaWR0aCAqIFdJRFRIX01VTFRJUExJRVIpOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgfSBmaW5hbGx5IHsKICAgIF9pdGVyYXRvcjQuZigpOwogIH0KfQoKZnVuY3Rpb24gZ2V0Q29sdW1uV2lkdGhNdWx0aXBsaWVyKG5vZGUsIG5vZGVzKSB7CiAgaWYgKCFub2RlLmNoaWxkcmVuLmxlbmd0aCkgewogICAgcmV0dXJuIDE7CiAgfQoKICB2YXIgbWF4Q29sdW1uID0gbm9kZS5pbmRleCArIG5vZGVzLmxlbmd0aDsKICB2YXIgbWluQ29sdW1uID0gbm9kZS5jaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24gKG1pbiwgYykgewogICAgcmV0dXJuIE1hdGgubWluKG1pbiwgYy5pbmRleCk7CiAgfSwgbWF4Q29sdW1uKTsKICByZXR1cm4gbWluQ29sdW1uIC0gbm9kZS5pbmRleDsKfQoKZnVuY3Rpb24gZ2V0T3ZlcmxhcHBpbmdJbmRpY2VzKG5vZGUsIG5vZGVzKSB7CiAgdmFyIGluZGljZXMgPSBbXTsKCiAgdmFyIF9pdGVyYXRvcjUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihub2RlcyksCiAgICAgIF9zdGVwNTsKCiAgdHJ5IHsKICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7CiAgICAgIHZhciBvdGhlciA9IF9zdGVwNS52YWx1ZTsKCiAgICAgIGlmIChoYXNPdmVybGFwKG5vZGUuc3RhcnQsIG5vZGUuZW5kLCBvdGhlci5zdGFydCwgb3RoZXIuZW5kKSkgewogICAgICAgIGluZGljZXMucHVzaChvdGhlci5pbmRleCk7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvcjUuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3I1LmYoKTsKICB9CgogIHJldHVybiBpbmRpY2VzOwp9CgpmdW5jdGlvbiBnZXROZXh0SW5kZXgobm9kZSwgbm9kZXMpIHsKICB2YXIgaW5kaWNlcyA9IGdldE92ZXJsYXBwaW5nSW5kaWNlcyhub2RlLCBub2Rlcyk7CiAgaW5kaWNlcy5zb3J0KCk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkrKykgewogICAgaWYgKGkgPCBpbmRpY2VzW2ldKSB7CiAgICAgIHJldHVybiBpOwogICAgfQogIH0KCiAgcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBnZXRPdmVybGFwcGluZ1JhbmdlKG5vZGUsIG5vZGVzLCBpbmRleE1pbiwgaW5kZXhNYXgpIHsKICB2YXIgcmV0dXJuRmlyc3RDb2x1bW4gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlOwogIHZhciBvdmVybGFwcGluZyA9IFtdOwoKICB2YXIgX2l0ZXJhdG9yNiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5vZGVzKSwKICAgICAgX3N0ZXA2OwoKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3I2LnMoKTsgIShfc3RlcDYgPSBfaXRlcmF0b3I2Lm4oKSkuZG9uZTspIHsKICAgICAgdmFyIG90aGVyID0gX3N0ZXA2LnZhbHVlOwoKICAgICAgaWYgKG90aGVyLmluZGV4ID49IGluZGV4TWluICYmIG90aGVyLmluZGV4IDw9IGluZGV4TWF4ICYmIGhhc092ZXJsYXAobm9kZS5zdGFydCwgbm9kZS5lbmQsIG90aGVyLnN0YXJ0LCBvdGhlci5lbmQpKSB7CiAgICAgICAgb3ZlcmxhcHBpbmcucHVzaChvdGhlcik7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvcjYuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3I2LmYoKTsKICB9CgogIGlmIChyZXR1cm5GaXJzdENvbHVtbiAmJiBvdmVybGFwcGluZy5sZW5ndGggPiAwKSB7CiAgICB2YXIgZmlyc3QgPSBvdmVybGFwcGluZy5yZWR1Y2UoZnVuY3Rpb24gKG1pbiwgbikgewogICAgICByZXR1cm4gTWF0aC5taW4obWluLCBuLmluZGV4KTsKICAgIH0sIG92ZXJsYXBwaW5nWzBdLmluZGV4KTsKICAgIHJldHVybiBvdmVybGFwcGluZy5maWx0ZXIoZnVuY3Rpb24gKG4pIHsKICAgICAgcmV0dXJuIG4uaW5kZXggPT09IGZpcnN0OwogICAgfSk7CiAgfQoKICByZXR1cm4gb3ZlcmxhcHBpbmc7Cn0KCmZ1bmN0aW9uIGdldFBhcmVudChub2RlLCBub2RlcykgewogIHZhciBwYXJlbnQgPSBudWxsOwoKICB2YXIgX2l0ZXJhdG9yNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5vZGVzKSwKICAgICAgX3N0ZXA3OwoKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3I3LnMoKTsgIShfc3RlcDcgPSBfaXRlcmF0b3I3Lm4oKSkuZG9uZTspIHsKICAgICAgdmFyIG90aGVyID0gX3N0ZXA3LnZhbHVlOwoKICAgICAgaWYgKGhhc092ZXJsYXAobm9kZS5zdGFydCwgbm9kZS5lbmQsIG90aGVyLnN0YXJ0LCBvdGhlci5lbmQpICYmIChwYXJlbnQgPT09IG51bGwgfHwgb3RoZXIuaW5kZXggPiBwYXJlbnQuaW5kZXgpKSB7CiAgICAgICAgcGFyZW50ID0gb3RoZXI7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvcjcuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3I3LmYoKTsKICB9CgogIHJldHVybiBwYXJlbnQ7Cn0KCmZ1bmN0aW9uIGhhc0Z1bGxXaWR0aChub2RlLCBub2Rlcywgb3ZlcmxhcFRocmVzaG9sZCkgewogIHZhciBfaXRlcmF0b3I4ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobm9kZXMpLAogICAgICBfc3RlcDg7CgogIHRyeSB7CiAgICBmb3IgKF9pdGVyYXRvcjgucygpOyAhKF9zdGVwOCA9IF9pdGVyYXRvcjgubigpKS5kb25lOykgewogICAgICB2YXIgb3RoZXIgPSBfc3RlcDgudmFsdWU7CgogICAgICBpZiAob3RoZXIgIT09IG5vZGUgJiYgb3RoZXIuaW5kZXggPiBub2RlLmluZGV4ICYmIGhhc092ZXJsYXAobm9kZS5zdGFydCwgYWRkVGltZShub2RlLnN0YXJ0LCBvdmVybGFwVGhyZXNob2xkKSwgb3RoZXIuc3RhcnQsIG90aGVyLmVuZCkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvcjguZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3I4LmYoKTsKICB9CgogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBnZXRHcm91cHModmlzdWFscywgZGF5U3RhcnQpIHsKICB2YXIgZ3JvdXBzID0gW107CgogIHZhciBfaXRlcmF0b3I5ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodmlzdWFscyksCiAgICAgIF9zdGVwOTsKCiAgdHJ5IHsKICAgIGZvciAoX2l0ZXJhdG9yOS5zKCk7ICEoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uKCkpLmRvbmU7KSB7CiAgICAgIHZhciB2aXN1YWwgPSBfc3RlcDkudmFsdWU7CgogICAgICB2YXIgX2dldE5vcm1hbGl6ZWRSYW5nZSA9IGdldE5vcm1hbGl6ZWRSYW5nZSh2aXN1YWwuZXZlbnQsIGRheVN0YXJ0KSwKICAgICAgICAgIF9nZXROb3JtYWxpemVkUmFuZ2UyID0gX3NsaWNlZFRvQXJyYXkoX2dldE5vcm1hbGl6ZWRSYW5nZSwgMiksCiAgICAgICAgICBzdGFydCA9IF9nZXROb3JtYWxpemVkUmFuZ2UyWzBdLAogICAgICAgICAgZW5kID0gX2dldE5vcm1hbGl6ZWRSYW5nZTJbMV07CgogICAgICB2YXIgYWRkZWQgPSBmYWxzZTsKCiAgICAgIHZhciBfaXRlcmF0b3IxMCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGdyb3VwcyksCiAgICAgICAgICBfc3RlcDEwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjEwLnMoKTsgIShfc3RlcDEwID0gX2l0ZXJhdG9yMTAubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGdyb3VwID0gX3N0ZXAxMC52YWx1ZTsKCiAgICAgICAgICBpZiAoaGFzT3ZlcmxhcChzdGFydCwgZW5kLCBncm91cC5zdGFydCwgZ3JvdXAuZW5kKSkgewogICAgICAgICAgICBncm91cC52aXN1YWxzLnB1c2godmlzdWFsKTsKICAgICAgICAgICAgZ3JvdXAuZW5kID0gTWF0aC5tYXgoZ3JvdXAuZW5kLCBlbmQpOwogICAgICAgICAgICBhZGRlZCA9IHRydWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yMTAuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjEwLmYoKTsKICAgICAgfQoKICAgICAgaWYgKCFhZGRlZCkgewogICAgICAgIGdyb3Vwcy5wdXNoKHsKICAgICAgICAgIHN0YXJ0OiBzdGFydCwKICAgICAgICAgIGVuZDogZW5kLAogICAgICAgICAgdmlzdWFsczogW3Zpc3VhbF0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yOS5lKGVycik7CiAgfSBmaW5hbGx5IHsKICAgIF9pdGVyYXRvcjkuZigpOwogIH0KCiAgcmV0dXJuIGdyb3VwczsKfQoKZnVuY3Rpb24gZ2V0Tm9kZSh2aXN1YWwsIGRheVN0YXJ0KSB7CiAgdmFyIF9nZXROb3JtYWxpemVkUmFuZ2UzID0gZ2V0Tm9ybWFsaXplZFJhbmdlKHZpc3VhbC5ldmVudCwgZGF5U3RhcnQpLAogICAgICBfZ2V0Tm9ybWFsaXplZFJhbmdlNCA9IF9zbGljZWRUb0FycmF5KF9nZXROb3JtYWxpemVkUmFuZ2UzLCAyKSwKICAgICAgc3RhcnQgPSBfZ2V0Tm9ybWFsaXplZFJhbmdlNFswXSwKICAgICAgZW5kID0gX2dldE5vcm1hbGl6ZWRSYW5nZTRbMV07CgogIHJldHVybiB7CiAgICBwYXJlbnQ6IG51bGwsCiAgICBzaWJsaW5nOiB0cnVlLAogICAgaW5kZXg6IDAsCiAgICB2aXN1YWw6IHZpc3VhbCwKICAgIHN0YXJ0OiBzdGFydCwKICAgIGVuZDogZW5kLAogICAgY2hpbGRyZW46IFtdCiAgfTsKfQoKZnVuY3Rpb24gZ2V0TWF4Q2hpbGRJbmRleChub2RlKSB7CiAgdmFyIG1heCA9IG5vZGUuaW5kZXg7CgogIHZhciBfaXRlcmF0b3IxMSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5vZGUuY2hpbGRyZW4pLAogICAgICBfc3RlcDExOwoKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3IxMS5zKCk7ICEoX3N0ZXAxMSA9IF9pdGVyYXRvcjExLm4oKSkuZG9uZTspIHsKICAgICAgdmFyIGNoaWxkID0gX3N0ZXAxMS52YWx1ZTsKICAgICAgdmFyIGNoaWxkTWF4ID0gZ2V0TWF4Q2hpbGRJbmRleChjaGlsZCk7CgogICAgICBpZiAoY2hpbGRNYXggPiBtYXgpIHsKICAgICAgICBtYXggPSBjaGlsZE1heDsKICAgICAgfQogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yMTEuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3IxMS5mKCk7CiAgfQoKICByZXR1cm4gbWF4Owp9CgpmdW5jdGlvbiBhZGRUaW1lKGlkZW50aWZpZXIsIG1pbnV0ZXMpIHsKICB2YXIgcmVtb3ZlTWludXRlcyA9IGlkZW50aWZpZXIgJSAxMDA7CiAgdmFyIHRvdGFsTWludXRlcyA9IHJlbW92ZU1pbnV0ZXMgKyBtaW51dGVzOwogIHZhciBhZGRIb3VycyA9IE1hdGguZmxvb3IodG90YWxNaW51dGVzIC8gNjApOwogIHZhciBhZGRNaW51dGVzID0gdG90YWxNaW51dGVzICUgNjA7CiAgcmV0dXJuIGlkZW50aWZpZXIgLSByZW1vdmVNaW51dGVzICsgYWRkSG91cnMgKiAxMDAgKyBhZGRNaW51dGVzOwp9"},null]}