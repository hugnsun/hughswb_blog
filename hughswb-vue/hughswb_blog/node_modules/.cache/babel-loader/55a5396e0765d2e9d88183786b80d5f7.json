{"remainingRequest":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/thread-loader/dist/cjs.js!/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/babel-loader/lib/index.js!/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/src/components/zw-player/player.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/src/components/zw-player/player.vue","mtime":1666926022000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/hughswb_blog/hughswb-vue/hughswb_blog/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}