{"remainingRequest":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/thread-loader/dist/cjs.js!/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/babel-loader/lib/index.js!/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/vuetify/lib/components/VNavigationDrawer/VNavigationDrawer.js","dependencies":[{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/vuetify/lib/components/VNavigationDrawer/VNavigationDrawer.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}