{"remainingRequest":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/thread-loader/dist/cjs.js!/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/babel-loader/lib/index.js!/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/vuetify/lib/components/VDatePicker/mixins/date-picker-table.js","dependencies":[{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/vuetify/lib/components/VDatePicker/mixins/date-picker-table.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sunwenbo/Downloads/博客/new-blog-master/blog-vue/blog/blog-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvc3Vud2VuYm8vRG93bmxvYWRzL1x1NTM1QVx1NUJBMi9uZXctYmxvZy1tYXN0ZXIvYmxvZy12dWUvYmxvZy9ibG9nLXZ1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiL1VzZXJzL3N1bndlbmJvL0Rvd25sb2Fkcy9cdTUzNUFcdTVCQTIvbmV3LWJsb2ctbWFzdGVyL2Jsb2ctdnVlL2Jsb2cvYmxvZy12dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvc3Vud2VuYm8vRG93bmxvYWRzL1x1NTM1QVx1NUJBMi9uZXctYmxvZy1tYXN0ZXIvYmxvZy12dWUvYmxvZy9ibG9nLXZ1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkRhdGVQaWNrZXIvVkRhdGVQaWNrZXJUYWJsZS5zYXNzIjsgLy8gRGlyZWN0aXZlcwoKaW1wb3J0IFRvdWNoIGZyb20gJy4uLy4uLy4uL2RpcmVjdGl2ZXMvdG91Y2gnOyAvLyBNaXhpbnMKCmltcG9ydCBDb2xvcmFibGUgZnJvbSAnLi4vLi4vLi4vbWl4aW5zL2NvbG9yYWJsZSc7CmltcG9ydCBMb2NhbGFibGUgZnJvbSAnLi4vLi4vLi4vbWl4aW5zL2xvY2FsYWJsZSc7CmltcG9ydCBUaGVtZWFibGUgZnJvbSAnLi4vLi4vLi4vbWl4aW5zL3RoZW1lYWJsZSc7IC8vIFV0aWxzCgppbXBvcnQgeyBjcmVhdGVJdGVtVHlwZU5hdGl2ZUxpc3RlbmVycywgc2FuaXRpemVEYXRlU3RyaW5nIH0gZnJvbSAnLi4vdXRpbCc7CmltcG9ydCBpc0RhdGVBbGxvd2VkIGZyb20gJy4uL3V0aWwvaXNEYXRlQWxsb3dlZCc7CmltcG9ydCB7IG1lcmdlTGlzdGVuZXJzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9tZXJnZURhdGEnOwppbXBvcnQgbWl4aW5zIGZyb20gJy4uLy4uLy4uL3V0aWwvbWl4aW5zJzsKaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICcuLi8uLi8uLi91dGlsL2hlbHBlcnMnOwpleHBvcnQgZGVmYXVsdCBtaXhpbnMoQ29sb3JhYmxlLCBMb2NhbGFibGUsIFRoZW1lYWJsZQovKiBAdnVlL2NvbXBvbmVudCAqLwopLmV4dGVuZCh7CiAgZGlyZWN0aXZlczogewogICAgVG91Y2g6IFRvdWNoCiAgfSwKICBwcm9wczogewogICAgYWxsb3dlZERhdGVzOiBGdW5jdGlvbiwKICAgIGN1cnJlbnQ6IFN0cmluZywKICAgIGRpc2FibGVkOiBCb29sZWFuLAogICAgZm9ybWF0OiBGdW5jdGlvbiwKICAgIGV2ZW50czogewogICAgICB0eXBlOiBbQXJyYXksIEZ1bmN0aW9uLCBPYmplY3RdLAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfSwKICAgIGV2ZW50Q29sb3I6IHsKICAgICAgdHlwZTogW0FycmF5LCBGdW5jdGlvbiwgT2JqZWN0LCBTdHJpbmddLAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gJ3dhcm5pbmcnOwogICAgICB9CiAgICB9LAogICAgbWluOiBTdHJpbmcsCiAgICBtYXg6IFN0cmluZywKICAgIHJhbmdlOiBCb29sZWFuLAogICAgcmVhZG9ubHk6IEJvb2xlYW4sCiAgICBzY3JvbGxhYmxlOiBCb29sZWFuLAogICAgdGFibGVEYXRlOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICB2YWx1ZTogW1N0cmluZywgQXJyYXldCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaXNSZXZlcnNpbmc6IGZhbHNlLAogICAgICB3aGVlbFRocm90dGxlOiBudWxsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGNvbXB1dGVkVHJhbnNpdGlvbjogZnVuY3Rpb24gY29tcHV0ZWRUcmFuc2l0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5pc1JldmVyc2luZyA9PT0gIXRoaXMuJHZ1ZXRpZnkucnRsID8gJ3RhYi1yZXZlcnNlLXRyYW5zaXRpb24nIDogJ3RhYi10cmFuc2l0aW9uJzsKICAgIH0sCiAgICBkaXNwbGF5ZWRNb250aDogZnVuY3Rpb24gZGlzcGxheWVkTW9udGgoKSB7CiAgICAgIHJldHVybiBOdW1iZXIodGhpcy50YWJsZURhdGUuc3BsaXQoJy0nKVsxXSkgLSAxOwogICAgfSwKICAgIGRpc3BsYXllZFllYXI6IGZ1bmN0aW9uIGRpc3BsYXllZFllYXIoKSB7CiAgICAgIHJldHVybiBOdW1iZXIodGhpcy50YWJsZURhdGUuc3BsaXQoJy0nKVswXSk7CiAgICB9CiAgfSwKICB3YXRjaDogewogICAgdGFibGVEYXRlOiBmdW5jdGlvbiB0YWJsZURhdGUobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5pc1JldmVyc2luZyA9IG5ld1ZhbCA8IG9sZFZhbDsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLndoZWVsVGhyb3R0bGUgPSB0aHJvdHRsZSh0aGlzLndoZWVsLCAyNTApOwogIH0sCiAgbWV0aG9kczogewogICAgZ2VuQnV0dG9uQ2xhc3NlczogZnVuY3Rpb24gZ2VuQnV0dG9uQ2xhc3Nlcyhpc0FsbG93ZWQsIGlzRmxvYXRpbmcsIGlzU2VsZWN0ZWQsIGlzQ3VycmVudCwgaXNGaXJzdCwgaXNMYXN0KSB7CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHsKICAgICAgICAndi1zaXplLS1kZWZhdWx0JzogIWlzRmxvYXRpbmcsCiAgICAgICAgJ3YtZGF0ZS1waWNrZXItdGFibGVfX2N1cnJlbnQnOiBpc0N1cnJlbnQsCiAgICAgICAgJ3YtYnRuLS1hY3RpdmUnOiBpc1NlbGVjdGVkLAogICAgICAgICd2LWJ0bi0tZmxhdCc6ICFpc0FsbG93ZWQgfHwgdGhpcy5kaXNhYmxlZCwKICAgICAgICAndi1idG4tLXRleHQnOiBpc1NlbGVjdGVkID09PSBpc0N1cnJlbnQsCiAgICAgICAgJ3YtYnRuLS1yb3VuZGVkJzogaXNGbG9hdGluZywKICAgICAgICAndi1idG4tLWRpc2FibGVkJzogIWlzQWxsb3dlZCB8fCB0aGlzLmRpc2FibGVkLAogICAgICAgICd2LWJ0bi0tb3V0bGluZWQnOiBpc0N1cnJlbnQgJiYgIWlzU2VsZWN0ZWQsCiAgICAgICAgJ3YtZGF0ZS1waWNrZXItLWZpcnN0LWluLXJhbmdlJzogaXNGaXJzdCwKICAgICAgICAndi1kYXRlLXBpY2tlci0tbGFzdC1pbi1yYW5nZSc6IGlzTGFzdAogICAgICB9LCB0aGlzLnRoZW1lQ2xhc3Nlcyk7CiAgICB9LAogICAgZ2VuQnV0dG9uRXZlbnRzOiBmdW5jdGlvbiBnZW5CdXR0b25FdmVudHModmFsdWUsIGlzQWxsb3dlZCwgbW91c2VFdmVudFR5cGUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICByZXR1cm4gbWVyZ2VMaXN0ZW5lcnMoewogICAgICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljaygpIHsKICAgICAgICAgIGlmIChpc0FsbG93ZWQgJiYgIV90aGlzLnJlYWRvbmx5KSBfdGhpcy4kZW1pdCgnaW5wdXQnLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICB9LCBjcmVhdGVJdGVtVHlwZU5hdGl2ZUxpc3RlbmVycyh0aGlzLCAiOiIuY29uY2F0KG1vdXNlRXZlbnRUeXBlKSwgdmFsdWUpKTsKICAgIH0sCiAgICBnZW5CdXR0b246IGZ1bmN0aW9uIGdlbkJ1dHRvbih2YWx1ZSwgaXNGbG9hdGluZywgbW91c2VFdmVudFR5cGUsIGZvcm1hdHRlcikgewogICAgICB2YXIgaXNPdGhlck1vbnRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTsKICAgICAgdmFyIGlzQWxsb3dlZCA9IGlzRGF0ZUFsbG93ZWQodmFsdWUsIHRoaXMubWluLCB0aGlzLm1heCwgdGhpcy5hbGxvd2VkRGF0ZXMpOwogICAgICB2YXIgaXNTZWxlY3RlZCA9IHRoaXMuaXNTZWxlY3RlZCh2YWx1ZSkgJiYgaXNBbGxvd2VkOwogICAgICB2YXIgaXNDdXJyZW50ID0gdmFsdWUgPT09IHRoaXMuY3VycmVudDsKICAgICAgdmFyIHNldENvbG9yID0gaXNTZWxlY3RlZCA/IHRoaXMuc2V0QmFja2dyb3VuZENvbG9yIDogdGhpcy5zZXRUZXh0Q29sb3I7CiAgICAgIHZhciBjb2xvciA9IChpc1NlbGVjdGVkIHx8IGlzQ3VycmVudCkgJiYgKHRoaXMuY29sb3IgfHwgJ2FjY2VudCcpOwogICAgICB2YXIgaXNGaXJzdCA9IGZhbHNlOwogICAgICB2YXIgaXNMYXN0ID0gZmFsc2U7CgogICAgICBpZiAodGhpcy5yYW5nZSAmJiAhIXRoaXMudmFsdWUgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkgewogICAgICAgIGlzRmlyc3QgPSB2YWx1ZSA9PT0gdGhpcy52YWx1ZVswXTsKICAgICAgICBpc0xhc3QgPSB2YWx1ZSA9PT0gdGhpcy52YWx1ZVt0aGlzLnZhbHVlLmxlbmd0aCAtIDFdOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgc2V0Q29sb3IoY29sb3IsIHsKICAgICAgICBzdGF0aWNDbGFzczogJ3YtYnRuJywKICAgICAgICBjbGFzczogdGhpcy5nZW5CdXR0b25DbGFzc2VzKGlzQWxsb3dlZCAmJiAhaXNPdGhlck1vbnRoLCBpc0Zsb2F0aW5nLCBpc1NlbGVjdGVkLCBpc0N1cnJlbnQsIGlzRmlyc3QsIGlzTGFzdCksCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHR5cGU6ICdidXR0b24nCiAgICAgICAgfSwKICAgICAgICBkb21Qcm9wczogewogICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuZGlzYWJsZWQgfHwgIWlzQWxsb3dlZCB8fCBpc090aGVyTW9udGgKICAgICAgICB9LAogICAgICAgIG9uOiB0aGlzLmdlbkJ1dHRvbkV2ZW50cyh2YWx1ZSwgaXNBbGxvd2VkLCBtb3VzZUV2ZW50VHlwZSkKICAgICAgfSksIFt0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWJ0bl9fY29udGVudCcKICAgICAgfSwgW2Zvcm1hdHRlcih2YWx1ZSldKSwgdGhpcy5nZW5FdmVudHModmFsdWUpXSk7CiAgICB9LAogICAgZ2V0RXZlbnRDb2xvcnM6IGZ1bmN0aW9uIGdldEV2ZW50Q29sb3JzKGRhdGUpIHsKICAgICAgdmFyIGFycmF5aXplID0gZnVuY3Rpb24gYXJyYXlpemUodikgewogICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHYpID8gdiA6IFt2XTsKICAgICAgfTsKCiAgICAgIHZhciBldmVudERhdGE7CiAgICAgIHZhciBldmVudENvbG9ycyA9IFtdOwoKICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5ldmVudHMpKSB7CiAgICAgICAgZXZlbnREYXRhID0gdGhpcy5ldmVudHMuaW5jbHVkZXMoZGF0ZSk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5ldmVudHMgaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgIGV2ZW50RGF0YSA9IHRoaXMuZXZlbnRzKGRhdGUpIHx8IGZhbHNlOwogICAgICB9IGVsc2UgaWYgKHRoaXMuZXZlbnRzKSB7CiAgICAgICAgZXZlbnREYXRhID0gdGhpcy5ldmVudHNbZGF0ZV0gfHwgZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZXZlbnREYXRhID0gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmICghZXZlbnREYXRhKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9IGVsc2UgaWYgKGV2ZW50RGF0YSAhPT0gdHJ1ZSkgewogICAgICAgIGV2ZW50Q29sb3JzID0gYXJyYXlpemUoZXZlbnREYXRhKTsKICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5ldmVudENvbG9yID09PSAnc3RyaW5nJykgewogICAgICAgIGV2ZW50Q29sb3JzID0gW3RoaXMuZXZlbnRDb2xvcl07CiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuZXZlbnRDb2xvciA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIGV2ZW50Q29sb3JzID0gYXJyYXlpemUodGhpcy5ldmVudENvbG9yKGRhdGUpKTsKICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnRDb2xvcikpIHsKICAgICAgICBldmVudENvbG9ycyA9IHRoaXMuZXZlbnRDb2xvcjsKICAgICAgfSBlbHNlIHsKICAgICAgICBldmVudENvbG9ycyA9IGFycmF5aXplKHRoaXMuZXZlbnRDb2xvcltkYXRlXSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBldmVudENvbG9ycy5maWx0ZXIoZnVuY3Rpb24gKHYpIHsKICAgICAgICByZXR1cm4gdjsKICAgICAgfSk7CiAgICB9LAogICAgZ2VuRXZlbnRzOiBmdW5jdGlvbiBnZW5FdmVudHMoZGF0ZSkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBldmVudENvbG9ycyA9IHRoaXMuZ2V0RXZlbnRDb2xvcnMoZGF0ZSk7CiAgICAgIHJldHVybiBldmVudENvbG9ycy5sZW5ndGggPyB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWRhdGUtcGlja2VyLXRhYmxlX19ldmVudHMnCiAgICAgIH0sIGV2ZW50Q29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHsKICAgICAgICByZXR1cm4gX3RoaXMyLiRjcmVhdGVFbGVtZW50KCdkaXYnLCBfdGhpczIuc2V0QmFja2dyb3VuZENvbG9yKGNvbG9yKSk7CiAgICAgIH0pKSA6IG51bGw7CiAgICB9LAogICAgaXNWYWxpZFNjcm9sbDogZnVuY3Rpb24gaXNWYWxpZFNjcm9sbCh2YWx1ZSwgY2FsY3VsYXRlVGFibGVEYXRlKSB7CiAgICAgIHZhciB0YWJsZURhdGUgPSBjYWxjdWxhdGVUYWJsZURhdGUodmFsdWUpOyAvLyB0YWJsZURhdGUgaXMgJ1lZWVktTU0nIGZvciBEYXRlVGFibGUgYW5kICdZWVlZJyBmb3IgTW9udGhUYWJsZQoKICAgICAgdmFyIHNhbml0aXplVHlwZSA9IHRhYmxlRGF0ZS5zcGxpdCgnLScpLmxlbmd0aCA9PT0gMSA/ICd5ZWFyJyA6ICdtb250aCc7CiAgICAgIHJldHVybiB2YWx1ZSA8IDAgJiYgKHRoaXMubWluID8gdGFibGVEYXRlID49IHNhbml0aXplRGF0ZVN0cmluZyh0aGlzLm1pbiwgc2FuaXRpemVUeXBlKSA6IHRydWUpIHx8IHZhbHVlID4gMCAmJiAodGhpcy5tYXggPyB0YWJsZURhdGUgPD0gc2FuaXRpemVEYXRlU3RyaW5nKHRoaXMubWF4LCBzYW5pdGl6ZVR5cGUpIDogdHJ1ZSk7CiAgICB9LAogICAgd2hlZWw6IGZ1bmN0aW9uIHdoZWVsKGUsIGNhbGN1bGF0ZVRhYmxlRGF0ZSkgewogICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6dGFibGUtZGF0ZScsIGNhbGN1bGF0ZVRhYmxlRGF0ZShlLmRlbHRhWSkpOwogICAgfSwKICAgIHRvdWNoOiBmdW5jdGlvbiB0b3VjaCh2YWx1ZSwgY2FsY3VsYXRlVGFibGVEYXRlKSB7CiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTp0YWJsZS1kYXRlJywgY2FsY3VsYXRlVGFibGVEYXRlKHZhbHVlKSk7CiAgICB9LAogICAgZ2VuVGFibGU6IGZ1bmN0aW9uIGdlblRhYmxlKHN0YXRpY0NsYXNzLCBjaGlsZHJlbiwgY2FsY3VsYXRlVGFibGVEYXRlKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIHRyYW5zaXRpb24gPSB0aGlzLiRjcmVhdGVFbGVtZW50KCd0cmFuc2l0aW9uJywgewogICAgICAgIHByb3BzOiB7CiAgICAgICAgICBuYW1lOiB0aGlzLmNvbXB1dGVkVHJhbnNpdGlvbgogICAgICAgIH0KICAgICAgfSwgW3RoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RhYmxlJywgewogICAgICAgIGtleTogdGhpcy50YWJsZURhdGUKICAgICAgfSwgY2hpbGRyZW4pXSk7CiAgICAgIHZhciB0b3VjaERpcmVjdGl2ZSA9IHsKICAgICAgICBuYW1lOiAndG91Y2gnLAogICAgICAgIHZhbHVlOiB7CiAgICAgICAgICBsZWZ0OiBmdW5jdGlvbiBsZWZ0KGUpIHsKICAgICAgICAgICAgcmV0dXJuIGUub2Zmc2V0WCA8IC0xNSAmJiBfdGhpczMuaXNWYWxpZFNjcm9sbCgxLCBjYWxjdWxhdGVUYWJsZURhdGUpICYmIF90aGlzMy50b3VjaCgxLCBjYWxjdWxhdGVUYWJsZURhdGUpOwogICAgICAgICAgfSwKICAgICAgICAgIHJpZ2h0OiBmdW5jdGlvbiByaWdodChlKSB7CiAgICAgICAgICAgIHJldHVybiBlLm9mZnNldFggPiAxNSAmJiBfdGhpczMuaXNWYWxpZFNjcm9sbCgtMSwgY2FsY3VsYXRlVGFibGVEYXRlKSAmJiBfdGhpczMudG91Y2goLTEsIGNhbGN1bGF0ZVRhYmxlRGF0ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgIHN0YXRpY0NsYXNzOiBzdGF0aWNDbGFzcywKICAgICAgICBjbGFzczogX29iamVjdFNwcmVhZCh7CiAgICAgICAgICAndi1kYXRlLXBpY2tlci10YWJsZS0tZGlzYWJsZWQnOiB0aGlzLmRpc2FibGVkCiAgICAgICAgfSwgdGhpcy50aGVtZUNsYXNzZXMpLAogICAgICAgIG9uOiAhdGhpcy5kaXNhYmxlZCAmJiB0aGlzLnNjcm9sbGFibGUgPyB7CiAgICAgICAgICB3aGVlbDogZnVuY3Rpb24gd2hlZWwoZSkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICBpZiAoX3RoaXMzLmlzVmFsaWRTY3JvbGwoZS5kZWx0YVksIGNhbGN1bGF0ZVRhYmxlRGF0ZSkpIHsKICAgICAgICAgICAgICBfdGhpczMud2hlZWxUaHJvdHRsZShlLCBjYWxjdWxhdGVUYWJsZURhdGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSA6IHVuZGVmaW5lZCwKICAgICAgICBkaXJlY3RpdmVzOiBbdG91Y2hEaXJlY3RpdmVdCiAgICAgIH0sIFt0cmFuc2l0aW9uXSk7CiAgICB9LAogICAgaXNTZWxlY3RlZDogZnVuY3Rpb24gaXNTZWxlY3RlZCh2YWx1ZSkgewogICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkgewogICAgICAgIGlmICh0aGlzLnJhbmdlICYmIHRoaXMudmFsdWUubGVuZ3RoID09PSAyKSB7CiAgICAgICAgICB2YXIgX3NvcnQgPSBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy52YWx1ZSkuc29ydCgpLAogICAgICAgICAgICAgIF9zb3J0MiA9IF9zbGljZWRUb0FycmF5KF9zb3J0LCAyKSwKICAgICAgICAgICAgICBmcm9tID0gX3NvcnQyWzBdLAogICAgICAgICAgICAgIHRvID0gX3NvcnQyWzFdOwoKICAgICAgICAgIHJldHVybiBmcm9tIDw9IHZhbHVlICYmIHZhbHVlIDw9IHRvOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5pbmRleE9mKHZhbHVlKSAhPT0gLTE7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gdmFsdWUgPT09IHRoaXMudmFsdWU7CiAgICB9CiAgfQp9KTs="},null]}